{
  "bsonType": "object",
  "required": ["createdAt", "placementType", "placementData", "wheelstacksData", "placementOrders"],
  "properties": {
    "_id": {
      "bsonType": "objectId",
      "description": "Unique identifier for the history record"
    },
    "createdAt": {
      "bsonType": "date",
      "description": "Timestamp for the history record creation"
    },
    "placementType": {
      "bsonType": "string",
      "enum": ["grid", "storage", "basePlatform"],
      "description": "Type of the storage"
    },
    "placementData": {
      "bsonType": "object",
      "description": "All related placement data"
    },
    "wheelstacksData": {
      "bsonType": "object",
      "description": "object with all wheelstacks present in the placement at the time of record",
      "additionalProperties": {
        "bsonType": "object",
        "required": [
          "batchNumber",
          "placement",
          "rowPlacement",
          "colPlacement",
          "createdAt",
          "lastChange",
          "lastOrder",
          "maxSize",
          "blocked",
          "wheels",
          "status"
        ],
        "properties": {
          "_id": {
            "bsonType": "objectId",
            "description": "must be an objectId and is required"
          },
          "batchNumber": {
            "bsonType": "string",
            "description": "batch number of the WheelStack, we can't have wheels with different batchNumbers inside the one Wheelstack"
          },
          "placement": {
            "bsonType": "object",
            "required": ["type", "placementId"],
            "properties": {
              "type": {
                "bsonType": "string",
                "enum": ["grid", "basePlatform", "storage"],
                "description": "Currently used placement type for the `wheelstack`"
              },
              "placementId": {
                "bsonType": "objectId",
                "description": "objectId of the placement (we can have multiple `grid`s `basePlatform`s with the same `preset`), or `storage`"
              }
            }
          },
          "rowPlacement": {
            "bsonType": "string",
            "description": "must be a string and is required"
          },
          "colPlacement": {
            "bsonType": "string",
            "description": "must be a string and is required"
          },
          "createdAt": {
            "bsonType": "date",
            "description": "must be a date and is required"
          },
          "lastChange": {
            "bsonType": "date",
            "description": "must be a date and is required"
          },
          "lastOrder": {
            "bsonType": ["objectId", "null"],
            "description": "`objectId` of the placed order, or `null` if no orders were ever placed"
          },
          "maxSize": {
            "bsonType": "int",
            "description": "must be an integer and is required",
            "minimum": 1,
            "maximum": 6
          },
          "blocked": {
            "bsonType": "bool",
            "description": "must be a boolean and is required"
          },
          "wheels": {
            "bsonType": "array",
            "items": {
              "bsonType": "objectId",
              "description": "must be an `objectId` of the placed `wheel`s"
            },
            "description": "must be an array of `objectIds` of the placed `wheel`s and is required",
            "minItems": 0,
            "maxItems": 6
          },
          "status": {
            "bsonType": "string",
            "enum": ["laboratory", "shipped", "grid", "basePlatform", "rejected", "storage", "deconstructed"],
            "description": "must be a string and is required"
          }
        }
      }
    },
    "placementOrders": {
      "bsonType": "object",
      "description": "object with all `activeOrder` at the time of recording",
      "additionalProperties": {
        "bsonType": "object",
        "required": ["createdAt", "orderName", "affectedWheelStacks", "affectedWheels",
          "orderDescription", "source", "destination", "orderType", "status", "lastUpdated"],
        "properties": {
          "_id": {
            "bsonType": "objectId",
            "description": "Unique identifier for the order"
          },
          "orderName": {
            "bsonType": "string",
            "description": "Optional order name"
          },
          "orderDescription": {
            "bsonType": "string",
            "description": "Optional order description"
          },
          "createdAt": {
            "bsonType": "date",
            "description": "Timestamp for when the order was created"
          },
          "lastUpdated": {
            "bsonType": "date",
            "description": "Timestamp for the last update of the order"
          },
          "source": {
            "bsonType": "object",
            "required": ["placementType", "placementId", "rowPlacement", "columnPlacement"],
            "properties": {
              "placementType": {
                "bsonType": "string",
                "enum": ["grid", "basePlatform", "storage"],
                "description": "Source type (`grid` or `basePlatform`), from where we're taking it"
              },
              "placementId": {
                "bsonType": "objectId",
                "description": "objectId of the placement (we can have multiple `grid`s `basePlatform`s with the same `preset`)"
              },
              "rowPlacement": {
                "bsonType": "string",
                "description": "string identifier for the `row` of a source cell"
              },
              "columnPlacement": {
                "bsonType": "string",
                "description": "string identifier for the `column` of a source cell"
              }
            }
          },
          "destination": {
            "bsonType": "object",
            "required": ["placementType", "placementId","rowPlacement", "columnPlacement"],
            "properties": {
              "placementType": {
                "bsonType": "string",
                "enum": ["grid", "storage"],
                "description": "We can move only from `basePlatform` -> `grid` or inside the `grid. Even if we `moveToLaboratory` we still move `wheelStack` to some `extra` element in a `grid` and later it's transitioned to lab"
              },
              "placementId": {
                "bsonType": "objectId",
                "description": "objectId of the placement (we can have multiple `grid`s `basePlatform`s with the same `preset`)"
              },
              "rowPlacement": {
                "bsonType": "string",
                "description": "string identifier for the `row` of a destination cell"
              },
              "columnPlacement": {
                "bsonType": "string",
                "description": "string identifier for the `column` of a destination cell"
              }
            }
          },
          "orderType": {
            "bsonType": "string",
            "enum": ["moveWholeStack", "moveTopWheel", "moveToLaboratory", "mergeWheelStacks", "moveToProcessing", "moveToRejected", "moveToStorage"],
            "description": "Type of operation (moveWholeStack, moveTopWheel, moveToLaboratory, mergeWheelStack)"
          },
          "affectedWheelStacks": {
            "bsonType": "object",
            "required": ["source", "destination"],
            "properties": {
              "source": {
                "bsonType": ["objectId"],
                "description": "`objectId` of the wheelstack currently placed on the source cell, source cell can't be empty"
              },
              "destination": {
                "bsonType": ["null","objectId"],
                "description": "`objectId` of the wheelStack currently placed on the destination cell, destination cell can be empty"
              }
            }
          },
          "affectedWheels": {
            "bsonType": "object",
            "required": ["source", "destination"],
            "properties": {
              "source": {
                "bsonType": "array",
                "items": {
                  "bsonType": "objectId",
                  "description": "`objectId`'s of the wheels stored in affected wheelStack on the source cell"
                }
              },
              "destination": {
                "bsonType": "array",
                "items": {
                  "bsonType": "objectId",
                  "description": "`objectId`'s of the wheels stored in affected wheelStack on the destination cell"
                  }
                }
              }
          },
          "status": {
            "bsonType": "string",
            "enum": ["pending"],
            "description": "Status of the order, in `activeOrder` we can only have `pending` orders"
          }
        }
      }
    },
    "wheelsData": {
      "bsonType": "object"
    },
    "batchesData": {
      "bsonType": "object"
    }
  },
  "indexes": [
    { "keys": { "createdAt":  1 }, "options":  { "name":  "createdAt_ascending_index"} },
    { "keys": { "placementType":  1 }, "options": { "name": "placementType_ascending_index" } },
    { "keys": { "wheels": 1 }, "options":  { "name": "wheels_ascending_index"} },
    { "keys": { "placementData._id":  1 }, "options": { "name": "Fast query by `placementId`"} },
    { "keys": { "wheelstacksData.wheels" :  1 }, "options":  { "name": "Fast query by `wheelObjectId`" } },
    { "keys": { "placementOrders._id": 1 }, "options": { "name": "Fast query by `orderObjectId`"} },
    { "keys": { "placementOrders.source.placementType": 1, "placementOrders.source.placementId": 1 }, "options": { "name": "Fast query by source placementData" } },
    { "keys": { "placementOrder.destination.placementType": 1, "placementOrders.destination.placementId": 1 }, "options": { "name": "Fast query by destination placementData" } }
  ]
}
